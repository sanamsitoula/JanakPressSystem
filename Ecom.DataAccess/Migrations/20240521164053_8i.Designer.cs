// <auto-generated />
using System;
using Ecom.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecom.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240521164053_8i")]
    partial class _8i
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecom.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(833),
                            Description = "NEB",
                            DisplayOrder = 1,
                            Name = "NEB",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(856),
                            Description = "HSEB",
                            DisplayOrder = 3,
                            Name = "HSEB",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(859),
                            Description = "SLC",
                            DisplayOrder = 3,
                            Name = "SLC",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(862),
                            Description = "Book",
                            DisplayOrder = 3,
                            Name = "Book",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(865),
                            Description = "Exercise Book",
                            DisplayOrder = 3,
                            Name = "Exercise Book",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(868),
                            Description = "Jhura Kagaj",
                            DisplayOrder = 3,
                            Name = "Jhura Kagaj",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(871),
                            Description = "Kawadi",
                            DisplayOrder = 3,
                            Name = "Kawadi",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(873),
                            Description = "Religious",
                            DisplayOrder = 3,
                            Name = "Religious",
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 5, 21, 22, 25, 52, 109, DateTimeKind.Local).AddTicks(876),
                            Description = "Election",
                            DisplayOrder = 2,
                            Name = "Election",
                            Status = true
                        });
                });

            modelBuilder.Entity("Ecom.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        });
                });

            modelBuilder.Entity("Ecom.Models.DropdownV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Para")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParaId")
                        .HasColumnType("int");

                    b.Property<string>("ParaModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentParaId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DropdownV");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Para = "5",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "5"
                        },
                        new
                        {
                            Id = 2,
                            Para = "10",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "10"
                        },
                        new
                        {
                            Id = 3,
                            Para = "15",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "15"
                        },
                        new
                        {
                            Id = 4,
                            Para = "20",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "20"
                        },
                        new
                        {
                            Id = 5,
                            Para = "25",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "25"
                        },
                        new
                        {
                            Id = 6,
                            Para = "30",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "30"
                        },
                        new
                        {
                            Id = 7,
                            Para = "35",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "35"
                        },
                        new
                        {
                            Id = 8,
                            Para = "40",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "40"
                        },
                        new
                        {
                            Id = 9,
                            Para = "45",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "45"
                        },
                        new
                        {
                            Id = 10,
                            Para = "50",
                            ParaId = 1001,
                            ParaModel = "PerPokaSize",
                            ParentParaId = 2001,
                            Remarks = "PerPokaSize",
                            Status = true,
                            Value = "50"
                        },
                        new
                        {
                            Id = 11,
                            Para = "Male",
                            ParaId = 1002,
                            ParaModel = "Gender",
                            ParentParaId = 2002,
                            Remarks = "Gender",
                            Status = true,
                            Value = "Male"
                        },
                        new
                        {
                            Id = 12,
                            Para = "Female",
                            ParaId = 1002,
                            ParaModel = "Gender",
                            ParentParaId = 2002,
                            Remarks = "Gender",
                            Status = true,
                            Value = "Female"
                        },
                        new
                        {
                            Id = 13,
                            Para = "Others",
                            ParaId = 1002,
                            ParaModel = "Gender",
                            ParentParaId = 2002,
                            Remarks = "Gender",
                            Status = true,
                            Value = "Others"
                        });
                });

            modelBuilder.Entity("Ecom.Models.FiscalYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FiscalYear");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "2080"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2081"
                        },
                        new
                        {
                            Id = 3,
                            Name = "2082"
                        });
                });

            modelBuilder.Entity("Ecom.Models.Forma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedFormaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Page")
                        .HasColumnType("int");

                    b.Property<int?>("PrintAchieved")
                        .HasColumnType("int");

                    b.Property<int?>("PrintTarget")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Forma");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TA-32",
                            Page = 32,
                            PrintTarget = 205000,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "33-40",
                            PrintTarget = 205000,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "41-51",
                            PrintTarget = 205000,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "52-62",
                            PrintTarget = 205000,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "TA-62",
                            PrintTarget = 205000,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "33-40",
                            PrintTarget = 205000,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "41-51",
                            PrintTarget = 205000,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "52-62",
                            PrintTarget = 205000,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "64-93",
                            Page = 32,
                            PrintTarget = 205000,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("Ecom.Models.JobTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FiscalYearId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("JobCompleteDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("JobDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("JobStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("JobStep")
                        .HasColumnType("int");

                    b.Property<string>("JobStepId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoofAssociatedForma")
                        .HasColumnType("int");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PrePrintSize")
                        .HasColumnType("int");

                    b.Property<int?>("PrintAchieved")
                        .HasColumnType("int");

                    b.Property<int?>("PrintTarget")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FiscalYearId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("JobTicket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 1",
                            FiscalYearId = 1,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step1",
                            JobTypeId = 1,
                            LotNumber = 100,
                            Name = "Job 1",
                            PageNumber = 1,
                            PrePrintSize = 50,
                            PrintAchieved = 950,
                            PrintTarget = 1000,
                            ProductId = 1,
                            Remarks = "Remarks 1",
                            Status = true,
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 2",
                            FiscalYearId = 2,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 2, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 2, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 2, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step2",
                            JobTypeId = 1,
                            LotNumber = 101,
                            Name = "Job 2",
                            PageNumber = 2,
                            PrePrintSize = 100,
                            PrintAchieved = 1900,
                            PrintTarget = 2000,
                            ProductId = 2,
                            Remarks = "Remarks 2",
                            Status = true,
                            UpdatedBy = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 3, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 3",
                            FiscalYearId = 3,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 3, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step3",
                            JobTypeId = 1,
                            LotNumber = 102,
                            Name = "Job 3",
                            PageNumber = 3,
                            PrePrintSize = 150,
                            PrintAchieved = 2850,
                            PrintTarget = 3000,
                            ProductId = 3,
                            Remarks = "Remarks 3",
                            Status = true,
                            UpdatedBy = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 4",
                            FiscalYearId = 1,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 4, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 4, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step4",
                            JobTypeId = 1,
                            LotNumber = 103,
                            Name = "Job 4",
                            PageNumber = 4,
                            PrePrintSize = 200,
                            PrintAchieved = 3800,
                            PrintTarget = 4000,
                            ProductId = 1,
                            Remarks = "Remarks 4",
                            Status = true,
                            UpdatedBy = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 5",
                            FiscalYearId = 2,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 5, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step5",
                            JobTypeId = 2,
                            LotNumber = 104,
                            Name = "Job 5",
                            PageNumber = 5,
                            PrePrintSize = 250,
                            PrintAchieved = 4750,
                            PrintTarget = 5000,
                            ProductId = 2,
                            Remarks = "Remarks 5",
                            Status = true,
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 6, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 6",
                            FiscalYearId = 3,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 6, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 6, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 6, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step6",
                            JobTypeId = 2,
                            LotNumber = 105,
                            Name = "Job 6",
                            PageNumber = 6,
                            PrePrintSize = 300,
                            PrintAchieved = 5700,
                            PrintTarget = 6000,
                            ProductId = 3,
                            Remarks = "Remarks 6",
                            Status = true,
                            UpdatedBy = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 7, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 7",
                            FiscalYearId = 1,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 7, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 7, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 7, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step7",
                            JobTypeId = 2,
                            LotNumber = 106,
                            Name = "Job 7",
                            PageNumber = 7,
                            PrePrintSize = 350,
                            PrintAchieved = 6650,
                            PrintTarget = 7000,
                            ProductId = 3,
                            Remarks = "Remarks 7",
                            Status = true,
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 8",
                            FiscalYearId = 2,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 8, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 8, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 8, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step8",
                            JobTypeId = 2,
                            LotNumber = 107,
                            Name = "Job 8",
                            PageNumber = 8,
                            PrePrintSize = 400,
                            PrintAchieved = 7600,
                            PrintTarget = 8000,
                            ProductId = 3,
                            Remarks = "Remarks 8",
                            Status = true,
                            UpdatedBy = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Desc = "Description 9",
                            FiscalYearId = 3,
                            JobCompleteDate = new DateTimeOffset(new DateTime(2024, 1, 9, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobDate = new DateTimeOffset(new DateTime(2024, 1, 9, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStartDate = new DateTimeOffset(new DateTime(2024, 1, 9, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            JobStepId = "Step9",
                            JobTypeId = 2,
                            LotNumber = 108,
                            Name = "Job 9",
                            PageNumber = 9,
                            PrePrintSize = 450,
                            PrintAchieved = 8550,
                            PrintTarget = 9000,
                            ProductId = 3,
                            Remarks = "Remarks 9",
                            Status = true,
                            UpdatedBy = 1
                        });
                });

            modelBuilder.Entity("Ecom.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pre-Press"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Press"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Post-Press"
                        });
                });

            modelBuilder.Entity("Ecom.Models.Machinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobStep")
                        .HasColumnType("int");

                    b.Property<int?>("JobStepId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Machinary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Oliver "
                        },
                        new
                        {
                            Id = 2,
                            Name = "RMGT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NaphA"
                        });
                });

            modelBuilder.Entity("Ecom.Models.MachineJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int>("FormaId")
                        .HasColumnType("int");

                    b.Property<int?>("FormaPageSize")
                        .HasColumnType("int");

                    b.Property<int?>("FormaTarget")
                        .HasColumnType("int");

                    b.Property<int?>("InchargeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JobDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("JobStep")
                        .HasColumnType("int");

                    b.Property<string>("JobStepId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobTicketId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MachinaryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Shift")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftDuration")
                        .HasColumnType("int");

                    b.Property<string>("ShiftDurationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormaId");

                    b.HasIndex("JobTicketId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("MachinaryId");

                    b.HasIndex("ProductId");

                    b.ToTable("MachineJobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 5, 21, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1399),
                            Desc = "Description 1",
                            FormaId = 1,
                            FormaPageSize = 10,
                            InchargeId = 1,
                            JobDate = new DateTime(2024, 5, 21, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1385),
                            JobQuantity = 10,
                            JobStepId = "Step1",
                            JobTicketId = 1,
                            JobTypeId = 1,
                            MachinaryId = 1,
                            Name = "Machine Job 1",
                            ProductId = 1,
                            Remarks = "Remarks 1",
                            ReportDate = new DateTime(2024, 5, 22, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1386),
                            ShiftDurationId = "Duration1",
                            ShiftId = "Shift1",
                            Status = true,
                            SupervisorId = 1,
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2024, 5, 21, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1410),
                            Desc = "Description 2",
                            FormaId = 2,
                            FormaPageSize = 10,
                            InchargeId = 2,
                            JobDate = new DateTime(2024, 5, 21, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1405),
                            JobQuantity = 10,
                            JobStepId = "Step2",
                            JobTicketId = 2,
                            JobTypeId = 2,
                            MachinaryId = 2,
                            Name = "Machine Job 2",
                            ProductId = 2,
                            Remarks = "Remarks 2",
                            ReportDate = new DateTime(2024, 5, 23, 16, 40, 52, 109, DateTimeKind.Utc).AddTicks(1406),
                            ShiftDurationId = "Duration2",
                            ShiftId = "Shift2",
                            Status = true,
                            SupervisorId = 2,
                            UpdatedBy = 2
                        });
                });

            modelBuilder.Entity("Ecom.Models.P2M", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DropdownVId")
                        .HasColumnType("int");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int?>("FormaNumber")
                        .HasColumnType("int");

                    b.Property<int?>("JobStep")
                        .HasColumnType("int");

                    b.Property<string>("JobStepId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobTicketId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("P2MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("P2M_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerPokaSize")
                        .HasColumnType("int");

                    b.Property<int?>("PiecesQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("PokaNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivedById")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TotalProductQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("VerifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DropdownVId");

                    b.HasIndex("JobTicketId");

                    b.HasIndex("ProductId");

                    b.ToTable("P2M");
                });

            modelBuilder.Entity("Ecom.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BasePrice")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<double?>("CostPrice")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int?>("FormaNumber")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectLanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectLanguages")
                        .HasColumnType("int");

                    b.Property<string>("SubjectTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectTypes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Author 1",
                            BasePrice = 100.0,
                            CategoryId = 1,
                            ClassId = 1,
                            CostPrice = 50.0,
                            CreatedBy = "Admin",
                            Description = "Description 1",
                            FiscalYear = 2080,
                            ISBN = "ISBN-1",
                            ImageURL = "http://example.com/product1.jpg",
                            PageNumber = 100,
                            Status = true,
                            SubjectId = 1,
                            SubjectLanguageId = "1",
                            SubjectTypeId = "1",
                            Title = "Product 1"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Author 2",
                            BasePrice = 200.0,
                            CategoryId = 2,
                            ClassId = 2,
                            CostPrice = 150.0,
                            CreatedBy = "Admin",
                            Description = "Description 2",
                            FiscalYear = 2081,
                            ISBN = "ISBN-2",
                            ImageURL = "http://example.com/product2.jpg",
                            PageNumber = 200,
                            Status = true,
                            SubjectId = 2,
                            SubjectLanguageId = "2",
                            SubjectTypeId = "2",
                            Title = "Product 2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Author 1",
                            BasePrice = 100.0,
                            CategoryId = 1,
                            ClassId = 1,
                            CostPrice = 50.0,
                            CreatedBy = "Admin",
                            Description = "Description 1",
                            FiscalYear = 2080,
                            ISBN = "ISBN-1",
                            ImageURL = "http://example.com/product1.jpg",
                            PageNumber = 100,
                            Status = true,
                            SubjectId = 1,
                            SubjectLanguageId = "1",
                            SubjectTypeId = "1",
                            Title = "Product 3"
                        });
                });

            modelBuilder.Entity("Ecom.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nepali"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Ecom.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Ecom.Models.Forma", b =>
                {
                    b.HasOne("Ecom.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecom.Models.JobTicket", b =>
                {
                    b.HasOne("Ecom.Models.FiscalYear", "FiscalYear")
                        .WithMany()
                        .HasForeignKey("FiscalYearId");

                    b.HasOne("Ecom.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FiscalYear");

                    b.Navigation("JobType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecom.Models.MachineJob", b =>
                {
                    b.HasOne("Ecom.Models.Forma", "Forma")
                        .WithMany()
                        .HasForeignKey("FormaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecom.Models.JobTicket", "JobTicket")
                        .WithMany()
                        .HasForeignKey("JobTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecom.Models.Machinary", "Machinary")
                        .WithMany()
                        .HasForeignKey("MachinaryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecom.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Forma");

                    b.Navigation("JobTicket");

                    b.Navigation("JobType");

                    b.Navigation("Machinary");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecom.Models.P2M", b =>
                {
                    b.HasOne("Ecom.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecom.Models.DropdownV", "DropdownV")
                        .WithMany()
                        .HasForeignKey("DropdownVId");

                    b.HasOne("Ecom.Models.JobTicket", "JobTicket")
                        .WithMany()
                        .HasForeignKey("JobTicketId");

                    b.HasOne("Ecom.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Class");

                    b.Navigation("DropdownV");

                    b.Navigation("JobTicket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecom.Models.Product", b =>
                {
                    b.HasOne("Ecom.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ecom.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ecom.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });
#pragma warning restore 612, 618
        }
    }
}
